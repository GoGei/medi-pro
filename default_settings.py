'''
Django settings for medipro project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
'''
import os
from django.utils.translation import gettext_lazy as _

from django.contrib import messages

BASE_DIR = os.path.normpath(os.path.join(os.path.dirname(__file__))) + '/'

str2bool = lambda v: v.strip().lower() == 'true'  # noqa

APP_NAME = os.getenv('APP_NAME', 'MediPro')
SHORT_APP_NAME = os.getenv('SHORT_APP_NAME', 'MP')

SECRET_KEY = os.getenv('SECRET_KEY')
DEBUG = str2bool(os.getenv('DEBUG', 'false'))
API_DOCUMENTATION = str2bool(os.getenv('API_DOCUMENTATION', 'false'))
TEST = str2bool(os.getenv('TEST', 'false'))

HASHIDS_SALT = os.getenv('HASHIDS_SALT')
HASHIDS_MIN_LENGTH = os.getenv('HASHIDS_MIN_LENGTH')
HASHIDS_ALPHABET = os.getenv('HASHIDS_ALPHABET')

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django_hosts',
    'django_extensions',
    'widget_tweaks',
    'django_tables2',
    'django_filters',
    'rest_framework',
    'drf_spectacular',

    'core.User',
    'core.Timezones',
    'core.Country',
    'core.Medicine',
    'core.Colors',
    'core.Currency',
    'core.ClinicPreSettings',
]

MIDDLEWARE = [
    'django_hosts.middleware.HostsRequestMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_hosts.middleware.HostsResponseMiddleware',
]

ROOT_URLCONF = 'urls'
ROOT_HOSTCONF = 'hosts'
DEFAULT_HOST = 'public'
HOST_SCHEME = os.getenv('HOST_SCHEME', 'http')
HOST_PORT = os.getenv('HOST_PORT', '8000')
PARENT_HOST = os.getenv('PARENT_HOST', 'medi-pro.local')
CSRF_COOKIE_DOMAIN = PARENT_HOST

ALLOWED_HOSTS = [f'.{PARENT_HOST}']

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'Admin/templates/'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.messages.context_processors.messages',
                "core.context.app_context",
            ],
            'libraries': {
                'custom_tags': 'core.Utils.templatetags.tags',
            }
        },
    },
]

WSGI_APPLICATION = 'wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST', '127.0.0.1'),
        'PORT': os.getenv('DATABASE_PORT', '5432'),
        'TEST': {
            'NAME': f'{os.getenv("DATABASE_NAME")}_test',
            'USER': os.getenv('DATABASE_USER'),
        },
    }
}

LANGUAGE_CODE = 'en-us'
LANGUAGES = [
    ('uk', _('Ukrainian')),
    ('en', _('English')),
]
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'Admin/locale'),
    os.path.join(BASE_DIR, 'Clinic/locale'),
    os.path.join(BASE_DIR, 'core/locale'),
    os.path.join(BASE_DIR, 'Public/locale'),
)

TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
STATIC_ROOT = 'static'
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'htdocs'),
)

MEDIA_URL = 'media/'
MEDIA_ROOT = 'media'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'User.User'

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://%s:6379/1' % os.getenv('REDIS_HOST', 'redis'),
        'OPTIONS': {
            'DB': 1,
            'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
            'CONNECTION_POOL_CLASS_KWARGS': {'max_connections': 50, 'timeout': 20},
            'MAX_CONNECTIONS': 1000,
            'PICKLE_VERSION': 2,
            'DECODE_RESPONSES': True,
        },
    }
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

CELERY_BROKER_URL = 'redis://%s:6379/0' % os.getenv('REDIS_HOST', 'redis')

LOGIN_URL = 'login/'

MESSAGE_TAGS = {
    messages.ERROR: "danger",
}

ADMIN_PAGINATION_PER_PAGE = 20

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 50,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'COERCE_DECIMAL_TO_STRING': False,
    'DATETIME_FORMAT': '%d.%m.%Y %H:%M:%S%z',
    'DATE_FORMAT': '%d.%m.%Y',
    # 'TIME_FORMAT': '%H:%M',
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'DEFAULT_SCHEMA_CLASS': 'Api.documentation.auto_schema.TaggedSpectacularAutoSchema',
}
SPECTACULAR_SETTINGS = {
    'TITLE': f'{APP_NAME} API',
    'VERSION': '1.0',

    'COMPONENT_SPLIT_REQUEST': True,
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
    'SWAGGER_UI_SETTINGS': {
        'filter': True,
    },
}
